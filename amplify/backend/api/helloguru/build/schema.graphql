
type User {
  id: ID!
  profile: UserProfile
  profileId: ID!
  lastUpdated: String
  exerciseLogs(date: ModelStringKeyConditionInput, filter: ModelExerciseLogFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelExerciseLogConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type UserProfile {
  id: ID!
  name: String
  age: Int
  weight: Float
  height: Float
  gender: String
  fitnessGoal: String
  workoutDays: Int
  updatedAt: String
  avatar: String
  user: User
  createdAt: AWSDateTime!
  owner: String
}

type ExerciseLog {
  id: ID!
  exerciseName: String!
  date: String!
  reps: [Int]
  weights: [Float]
  user: User
  userId: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ExerciseLogInput {
  id: ID
  exerciseName: String!
  date: String!
  reps: [Int]
  weights: [Float]
  userId: ID!
}

input UpdateUserProfileInput {
  id: ID!
  name: String
  age: Int
  weight: Float
  height: Float
  gender: String
  fitnessGoal: String
  workoutDays: Int
  updatedAt: String
  avatar: String
}

type Query {
  getLatestExerciseLog(exerciseName: String!, userId: ID!): ExerciseLog
  getUser(id: ID!): User
  listUsers(id: ID, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection
  getUserProfile(id: ID!): UserProfile
  listUserProfiles(id: ID, filter: ModelUserProfileFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserProfileConnection
  getExerciseLog(id: ID!): ExerciseLog
  listExerciseLogs(id: ID, filter: ModelExerciseLogFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelExerciseLogConnection
  exerciseLogsByUserIdAndDate(userId: ID!, date: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelExerciseLogFilterInput, limit: Int, nextToken: String): ModelExerciseLogConnection
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  profileId: ModelIDInput
  lastUpdated: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  profileId: ModelIDInput
  lastUpdated: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  profileId: ID!
  lastUpdated: String
}

input UpdateUserInput {
  id: ID!
  profileId: ID
  lastUpdated: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createUserProfile(input: CreateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  updateUserProfile(input: UpdateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  deleteUserProfile(input: DeleteUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  createExerciseLog(input: CreateExerciseLogInput!, condition: ModelExerciseLogConditionInput): ExerciseLog
  updateExerciseLog(input: UpdateExerciseLogInput!, condition: ModelExerciseLogConditionInput): ExerciseLog
  deleteExerciseLog(input: DeleteExerciseLogInput!, condition: ModelExerciseLogConditionInput): ExerciseLog
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  profileId: ModelSubscriptionIDInput
  lastUpdated: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}

type Subscription {
  onCreateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateUserProfile(filter: ModelSubscriptionUserProfileFilterInput, owner: String): UserProfile @aws_subscribe(mutations: ["createUserProfile"])
  onUpdateUserProfile(filter: ModelSubscriptionUserProfileFilterInput, owner: String): UserProfile @aws_subscribe(mutations: ["updateUserProfile"])
  onDeleteUserProfile(filter: ModelSubscriptionUserProfileFilterInput, owner: String): UserProfile @aws_subscribe(mutations: ["deleteUserProfile"])
  onCreateExerciseLog(filter: ModelSubscriptionExerciseLogFilterInput, owner: String): ExerciseLog @aws_subscribe(mutations: ["createExerciseLog"])
  onUpdateExerciseLog(filter: ModelSubscriptionExerciseLogFilterInput, owner: String): ExerciseLog @aws_subscribe(mutations: ["updateExerciseLog"])
  onDeleteExerciseLog(filter: ModelSubscriptionExerciseLogFilterInput, owner: String): ExerciseLog @aws_subscribe(mutations: ["deleteExerciseLog"])
}

type ModelUserProfileConnection {
  items: [UserProfile]!
  nextToken: String
}

input ModelUserProfileFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  age: ModelIntInput
  weight: ModelFloatInput
  height: ModelFloatInput
  gender: ModelStringInput
  fitnessGoal: ModelStringInput
  workoutDays: ModelIntInput
  updatedAt: ModelStringInput
  avatar: ModelStringInput
  and: [ModelUserProfileFilterInput]
  or: [ModelUserProfileFilterInput]
  not: ModelUserProfileFilterInput
}

input ModelUserProfileConditionInput {
  name: ModelStringInput
  age: ModelIntInput
  weight: ModelFloatInput
  height: ModelFloatInput
  gender: ModelStringInput
  fitnessGoal: ModelStringInput
  workoutDays: ModelIntInput
  updatedAt: ModelStringInput
  avatar: ModelStringInput
  and: [ModelUserProfileConditionInput]
  or: [ModelUserProfileConditionInput]
  not: ModelUserProfileConditionInput
}

input CreateUserProfileInput {
  id: ID
  name: String
  age: Int
  weight: Float
  height: Float
  gender: String
  fitnessGoal: String
  workoutDays: Int
  updatedAt: String
  avatar: String
}

input DeleteUserProfileInput {
  id: ID!
}

input ModelSubscriptionUserProfileFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  age: ModelSubscriptionIntInput
  weight: ModelSubscriptionFloatInput
  height: ModelSubscriptionFloatInput
  gender: ModelSubscriptionStringInput
  fitnessGoal: ModelSubscriptionStringInput
  workoutDays: ModelSubscriptionIntInput
  updatedAt: ModelSubscriptionStringInput
  avatar: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserProfileFilterInput]
  or: [ModelSubscriptionUserProfileFilterInput]
}

type ModelExerciseLogConnection {
  items: [ExerciseLog]!
  nextToken: String
}

input ModelExerciseLogFilterInput {
  id: ModelIDInput
  exerciseName: ModelStringInput
  date: ModelStringInput
  reps: ModelIntInput
  weights: ModelFloatInput
  userId: ModelIDInput
  and: [ModelExerciseLogFilterInput]
  or: [ModelExerciseLogFilterInput]
  not: ModelExerciseLogFilterInput
}

input ModelExerciseLogConditionInput {
  exerciseName: ModelStringInput
  date: ModelStringInput
  reps: ModelIntInput
  weights: ModelFloatInput
  userId: ModelIDInput
  and: [ModelExerciseLogConditionInput]
  or: [ModelExerciseLogConditionInput]
  not: ModelExerciseLogConditionInput
}

input CreateExerciseLogInput {
  id: ID
  exerciseName: String!
  date: String!
  reps: [Int]
  weights: [Float]
  userId: ID!
}

input UpdateExerciseLogInput {
  id: ID!
  exerciseName: String
  date: String
  reps: [Int]
  weights: [Float]
  userId: ID
}

input DeleteExerciseLogInput {
  id: ID!
}

input ModelSubscriptionExerciseLogFilterInput {
  id: ModelSubscriptionIDInput
  exerciseName: ModelSubscriptionStringInput
  date: ModelSubscriptionStringInput
  reps: ModelSubscriptionIntInput
  weights: ModelSubscriptionFloatInput
  userId: ModelSubscriptionIDInput
  and: [ModelSubscriptionExerciseLogFilterInput]
  or: [ModelSubscriptionExerciseLogFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

